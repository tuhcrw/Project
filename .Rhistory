attach(mtcars)
mean(mpg)
sd(mpg)
t.test(mpg)
round(t.test(mpg)$conf.int)
n=9
s = 20
mean<-1100
N = 9
mean = 1100
sd = 30
error = qt(0.975, df = N-1) * sd / sqrt(N)
ans = mean + c(-1,1) * error
round(ans)
round(ans, 2)
N = 9
mean = -2
# error = qt(0.95,df = 9)*sd/sqrt(N-1) = 2
ans = 2 * sqrt(N) / qt(0.975, df = N-1)
round(ans, 2)
@q4
nx = 10
ny = 10
mx = 3
my = 5
Sx2 = 0.6
Sy2 = 0.68
Sr = sqrt(((nx-1)*Sx2+(ny-1)*Sy2)/(nx+ny-2))
ans = mx - my + c(-1,1) * qt(0.975, df = nx + ny - 2) * Sr * sqrt(1/nx+1/ny)
round(ans, 2)
round(ans, 2)
nx = 100
ny = 100
mx = 4
my = 6
Sx2 = 0.5
Sy2 = 2
Sr = sqrt(((nx-1)*Sx2+(ny-1)*Sy2)/(nx+ny-2))
ans = my - mx + c(-1,1) * qt(0.975, df = nx + ny - 2) * Sr * sqrt(1/nx+1/ny)
round(ans, 2)
nD = 9
nP = 9
mD = -3
mP = 1
sD = 1.5
sP = 1.8
Sr = sqrt(((nD-1)*sD^2+(nP-1)*sP^2)/(nD+nD-2))
ans = mD - mP + c(-1,1) * qt(0.9, df = nD + nP - 2) * Sr * sqrt(1/nD+1/nP)
ans
t.test(baseline, week2)
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
t.test(baseline, week2)
t.test(baseline, week2,alternative = "two.sided", paired = T)
brainVolumeMean <-1100
stanDev <-30
n <- 9
brainVolumeMean + c(-1,1) * qt(0.975, df = n-1) * stanDev/sqrt(n))
round(brainVolumeMean + c(-1,1) * qt(0.975, df = n-1) * stanDev/sqrt(n))
#Regression models Quiz 1 Q1
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
library(manipulate)
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(galton, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
sum(w*(x-u)^2)
optimize( function(u){ sum(w*(x-u)^2) }, interval=c(-100,100))
mu <- sum(x*w) / sum(w)
mu
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
R.version.string
install.packages("swirl")
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(chikd,4) ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <-lm(child ~ parent, galton)
abline(regrline, lwd=3, col="red")
summary(regrline)
install.packages("swirl")
swirl
load(swirl)
library(swirl)
ls
ls()
rm(list=ls())
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor, gpa_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, data= galton)
sqrt(sum(resid(fit)^2)/ (n -2))
sqrt(sum(fit$residuals^2) / (n-2))
summary(fit)$sigma
sqrt(deviance(fit)/ (n-2))
mu <-mean(galton$child)
sTot <- sum((galton$shild-mu)^2)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1-(sRes/sTot)
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
plot(x,y)
fit<- lm(x~y)
swirl()
library(manipulate)
myHist <- function(mu) {
hist(galton$child, col="blue", breals=100)
lines(c(mu,mu), c(0,150), col="red",lwd=5)
#finding mean squared error by squaring the difference between each child height entry and mu
mse <-mean((galton$child - mu)^2)
text(63, 150, paste("mu = " mu))
text(63, 140, paste("MSE = " round(mse, 2)))
}
myHist <- function(mu) {
hist(galton$child, col="blue", breals=100)
lines(c(mu,mu), c(0,150), col="red",lwd=5)
#finding mean squared error by squaring the difference between each child height entry and mu
mse <-mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
hist(galton$child, col="blue", breaks=100)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
data(mtcars)
newdata <- data.frame(x = xVals)
p1 <- predict(fit, newdata, interval = ("confidence"))
p2 <- predict(fit, newdata, interval = ("prediction"))
plot(x, y, frame=FALSE,xlab="Carat",ylab="Dollars",pch=21,col="black", bg="lightblue", cex=2)
abline(fit, lwd = 2)
lines(xVals, p1[,2]); lines(xVals, p1[,3])
lines(xVals, p2[,2]); lines(xVals, p2[,3])
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
fit
predict(fit, data.frame(x=mean(x)), interval="confidence")
newdata <- data.frame(x=mean(x))
predict(fit, newdata, interval="confidence")
help(mtcars)
predict(fit,newdata(x=3),interval="prediction")
predict(fit,data.frame(x=3),interval="prediction")
?confint
fit2 <- lm(2000/y ~x)
confint(fit2)
fit2 <- lm(y/2 ~x)
confint(fit2, wt, ;eve; = 0.95)
confint(fit2, wt, level = 0.95)
confint(fit2, x, level = 0.95)
fit2 <- lm(y ~x/2)
confint(fit2, x, level = 0.95)
x <- mtcars$wt/2
fit2 <- lm(y ~x)
confint(fit2, x, level = 0.95)
library(datasets); data(swiss); require(stats), require(graphics)
pairs (swiss, panel = panel.smooth, main = "Swiss Data", col = 3 + (swiss$Catholic >50))
library(datasets); data(swiss); require(stats); require(graphics)
pairs (swiss, panel = panel.smooth, main = "Swiss Data", col = 3 + (swiss$Catholic >50))
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~1, galton)
view(trees)
View(trees)
fit <-lm(Volume ~ Girth + Height + Constant -`, trees)
fit <-lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <-eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility ~ ., data = swiss)
all <- lm(Fertility ~ ., data = swiss)
summary(all)
lm(Fertility ~ Agriculture, data = swiss)
summary(lm(Fertility ~ Agriculture, data = swiss))
cor(Examination, Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- (swiss$Examination + swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, data=swiss )
all$coef - efit$coef
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sF
summary(InsectSprays[,2])
sapply(InsectSprays)
sapply(InsectSprays, class)
fit <-(InsectSprays$count ~ InsectSprays$spray)
fit <- lm(count ~ spray, InsectSprays)
summary(fit$coef)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray -1)
nfit <- lm(count ~ spray -1, data = InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "c")
spray2 <- relevel(InsectSprays$spray, "C")
fit2 summary(lm(count ~ spray2, data = InsectSprays))$coef
fit2 <- summary(lm(count ~ spray2, data = InsectSprays))$coef
swirl()
fit2 <- lm(count ~ spray -1, data = InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
fit$coef[3] - fit$coef[2] / 1.6011
(fit$coef[3] - fit$coef[2]) / 1.6011
(fit$coef[2]-fit$coef[3])/1.6011
swirl()
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, Data= hunger)
fit <- lm(Numeric ~ Year, data = hunger)
summary(fit)$coef
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <-lm(Nueric ~ Year + Sex, data = hunger)
lmBoth <-lm(Numeric ~ Year + Sex, data = hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + (Sex * Year))
lmInter <- lm(Numeric ~ Year + Sex + (Sex * Year), data = hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
coef(fitno) - coef(fit)
coef(fit)-coef(fitno)
jead(dfbeta(fit))
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1, ])
1-resid(fit)[1]/resno
view(hatvalues(fit))
View(hatvalues(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1])
)
head(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
library(datasets); data(mtcars); require(stats); require(graphics)
pairs (mtcars, panel = panel.smooth, main = "Mtcars Data", col = 3)
pairs (mtcars, panel = panel.smooth, main = "Mtcars Data", col = 4)
pairs (mtcars, panel = panel.smooth, main = "Mtcars Data", col = 2)
pairs (mtcars, panel = panel.smooth, main = "Mtcars Data", col = 3)
help(mtcars)
library(datasets); data(mtcars); require(stats); require(graphics)
library(ggplot2)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
str(mtcars)
plot(mpg ~ am. data = mtcars)
plot(mpg ~ am, data = mtcars)
plot(mpg ~ am, data = mtcars)
ggplot(mtcars, aes(x=mpg, y=am)) + geom_point()
coplot(mpg ~ am | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
'boxplot(mpg ~ am, data = mtcars, ylab = "MPG", xlab = "Transmission Type")
boxplot(mpg ~ am, data = mtcars, ylab = "MPG", xlab = "Transmission Type")
)
boxplot(mpg ~ am, data = mtcars, ylab = "MPG", xlab = "Transmission Type")
plot(mpg ~ am, data = mtcars)
boxplot(mpg ~ am, data = mtcars, ylab = "MPG", xlab = "Transmission Type")
mpg.lm <-lm(mpg ~ am, data = mtcars)
summary(mpg.lm)
x11(width=7, height=2, pointsize=10)
par(mfrow = c(1, 4), mar=c(5.1,4.1,2.1,1.1))
plot(mpg.lm)
par(mfrow=c(1,1))
x11(width=7, height=2, pointsize=10)
par(mfrow = c(1, 4), mar=c(5.1,4.1,2.1,1.1))
plot(mpg.lm)
par(mfrow=c(1,1))
par(mfrow = c(1, 4), mar=c(5.1,4.1,2.1,1.1))
plot(mpg.lm)
par(mfrow=c(1,1))
par(mfrow = c(1, 4), mar=c(5.1,4.1,2.1,1.1))
plot(mpg.lm)
par(mfrow=c(1,1))
par(mfrow = c(2,2), mar=c(5.1,4.1,2.1,1.1))
plot(mpg.lm)
par(mfrow=c(1,1))
scatterplot.matrix(~mpg + wt +cyl|sm. data= mtcars, main= "2 Transmission options")
library(datasets); library(ggplot2); library(car); data(mtcars); require(stats); require(graphics)
install.packages("car")
library(datasets); library(ggplot2); library(car); data(mtcars); require(stats); require(graphics)
scatterplot.matrix(~mpg + wt +cyl|sm, data= mtcars, main= "2 Transmission options")
scatterplot.matrix(~mpg + wt +cyl|am, data= mtcars, main= "2 Transmission options")
library(datasets); library(ggplot2); library(car); data(mtcars); require(stats); require(graphics)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
str(mtcars)
scatterplot.matrix(~mpg + wt +cyl|am, data= mtcars, main= "2 Transmission options")
library(datasets); library(ggplot2); library(car); data(mtcars); require(stats); require(graphics)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
str(mtcars)
scatterplotMatrix(~mpg + wt +cyl|am, data= mtcars, main= "2 Transmission options")
library(datasets); library(ggplot2); library(car); data(mtcars); require(stats); require(graphics)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
str(mtcars)
scatterplotMatrix(~mpg + wt +cyl|am, data= mtcars, main= "2 Transmission options")
?mtcars
transMPG[ c("mtcars$am","mtcars$mpg","mtcars$wt","mtcars$cyl")]
mtcars[ c("am","mpg","wt","cyl")]
head(mtcars[ c("am","mpg","wt","cyl")],5)
ggplot(mtcars, aes(x=wt, y=mpg, colour=am)) + geom_point()
ggplot(mtcars, aes(x=wt, y=mpg, shape=am)) + geom_point()
ggplot(mtcars, aes(x=wt, y=mpg, colour=am)) + geom_point()
fit <- lm(am ~ mpg, data=mtcars)
summary(fit)$coef
lmAuto <- lm(mtcars$wt[mtcars$am=='Automatic'] ~ mtcars$mpg[mtcars$am=='Automatic'])
summary(lmAuto)$coef
lmMan <- lm(mtcars$wt[mtcars$am=='Manual'] ~ mtcars$mpg[mtcars$am=='Manual'])
summary(lmMan)$coef
plot(lmMan, lmAuto)
library(datasets); library(ggplot2); library(car); data(mtcars); require(stats); require(graphics)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
str(mtcars)
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars)
e <- annova(fit1, fit2)
e <- anova(fit1, fit2)
e$Pr
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
hatvalues(fit)
dfbetas(fit)
e
?step
?pairs
library(MASS)
?shuttle
data(shuttle)
str(shuttle)
names(shuttle)
?glm
fit <- glm(use ~ wind, family='binomial', shuttle)
exp(fit$coeff)
fit <- glm(use ~ wind + as.factor(magn), family='binomial', shuttle)
exp(fit$coeff)
library(caret); librarykernlab; data(spam)
inTrain <-createDataPartition(y=spam$type, p=0.75, list=FALSE)
install.packages("kernlab")
library(caret); librarykernlab; data(spam)
library(caret); library kernlab; data(spam)
library(caret); library(kernlab); data(spam)
inTrain <-createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <-spam[intrain,]
training <-spam[inTrain,]
testing <-spam[-inTrain,]
M ,=abs(cor(training[,-58]))
M <-abs(cor(training[,-58]))
diag(M) <-0
which(M> 0.8, arr.ind=T)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(ISLR); library(ggplot2); library(caret); library(gridExtra);
data(Wage)
summary(Wage)
install.packages("ISLR")
install.packages("gridExtra")
library(ISLR); library(ggplot2); library(caret); library(gridExtra);
data(Wage)
summary(Wage)
str(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training); dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qq <- qplot(age,wage,colour=education,data=training)
qq +  geom_smooth(method='lm',formula=y~x)
cutWage <- cut2(training$wage,g=3)
table(cutWage)
Library(Hmisc)
library(Hmisc)
cutWage <- cut2(training$wage,g=3)
table(cutWage)
p1 <- qplot(cutWage,age, data=training,fill=cutWage,
geom=c("boxplot"))
p1
p2 <- qplot(cutWage,age, data=training,fill=cutWage,
geom=c("boxplot","jitter"))
grid.arrange(p1,p2,ncol=2)
t1 <- table(cutWage,training$jobclass)
t1
prop.table(t1,1)
qplot(wage,colour=education,data=training,geom="density")
setwd("C:/Coursera/Practical Machine Learning/Project")
getwd()
#setwd("C:/Coursera/Practical Machine Learning/Project")
#Download and extract the zip file
data_training<-read.csv("./pml-training.csv")
data_testing<-read.csv("./pml-testing.csv")
getwd()
#setwd("C:/Coursera/Practical Machine Learning/Project")
#Download and extract the zip file
data_training<-read.csv("data/pml-training.csv")
data_testing<-read.csv("data/pml-testing.csv")
install.packages("data.table")
getwd()
system.time(trainingData<-read.csv("data/pml-training.csv"))
system.time(trainingData <- fread("data/pml-training.csv"))
testData<-read.csv("data/pml-testing.csv")
dim(trainingData)
str(trainingData)
NAColumns <- sapply(trainingData, function (x) any(is.na(x) | x == ""))
trainingDataRemovedNACols <- trainingData[,NAColumns]
str(trainingDataRemovedNACols)
inTrain <- createDataPartition(y=trainingData$classe,
p=0.7, list=FALSE)
training <- trainingData[inTrain,]
validation <- trainingData[-inTrain,]
dim(training)
install.packages("memoise")
install.packages("dplyr")
view(training)
getwd()
system.time(trainingData<-read.csv("data/pml-training.csv"))
testData<-read.csv("data/pml-testing.csv")
dim(trainingData)
str(trainingData)
NAColumns <- sapply(trainingData, function (x) any(is.na(x) | x == ""))
trainingDataRemovedNACols <- trainingData[,NAColumns]
str(trainingDataRemovedNACols)
inTrain <- createDataPartition(y=trainingData$classe,
p=0.7, list=FALSE)
training <- trainingData[inTrain,]
validation <- trainingData[-inTrain,]
dim(training)
view(training)
View(training)
View(training)
View(trainingData)
View(trainingData)
getwd()
r <- memoise(read.csv)
system.time(trainingData<- r("data/pml-training.csv"))
testData<- r("data/pml-testing.csv")
dim(trainingData)
#glimpse(trainingData)
str(trainingData)
trainingDataRemovedNACols <- trainingData[,c(1:17, 20, 23, 26, 37:49, 30, 74, 84:92, 95, 98)]
dim(trainingDataRemovedNACols)
str(trainingDataRemovedNACols)
str(trainingDataRemovedNACols$classe)
str(trainingData$classe)
str(trainingData$classe, list.len = 160)
str(trainingData, list.len = 160)
library(fields)
t(stats(trainingData))
sum((colSums(!is.na(trainingData[,-ncol(trainingData)])) < 0.6*nrow(trainingData)))
sum((colSums(!is.na(trainingData[,-ncol(trainingData)])) < 0.8*nrow(trainingData)))
sum((colSums(!is.na(trainingData[,-ncol(trainingData)])) < 0.9*nrow(trainingData)))
sum((colSums(!is.na(trainingData[,-ncol(trainingData)])) < 1*nrow(trainingData)))
sum((colSums(!is.na(trainingData[,-ncol(trainingData)])) < 0.1*nrow(trainingData)))
sum((colSums(!is.na(trainingData[,-ncol(trainingData)])) < 0.5*nrow(trainingData)))
?nearZeroVar
install.packages("rattle")
install.packages("e1071")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("randomForest")
install.packages("ISLR")
